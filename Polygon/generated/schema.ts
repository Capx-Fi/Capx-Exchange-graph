// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Order extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Order entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Order entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Order", id.toString(), this);
  }

  static load(id: string): Order | null {
    return store.get("Order", id) as Order | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get initiator(): Bytes {
    let value = this.get("initiator");
    return value.toBytes();
  }

  set initiator(value: Bytes) {
    this.set("initiator", Value.fromBytes(value));
  }

  get tokenGive(): Bytes {
    let value = this.get("tokenGive");
    return value.toBytes();
  }

  set tokenGive(value: Bytes) {
    this.set("tokenGive", Value.fromBytes(value));
  }

  get tokenGet(): Bytes {
    let value = this.get("tokenGet");
    return value.toBytes();
  }

  set tokenGet(value: Bytes) {
    this.set("tokenGet", Value.fromBytes(value));
  }

  get tokenGiveDecimal(): BigInt {
    let value = this.get("tokenGiveDecimal");
    return value.toBigInt();
  }

  set tokenGiveDecimal(value: BigInt) {
    this.set("tokenGiveDecimal", Value.fromBigInt(value));
  }

  get tokenGetDecimal(): BigInt {
    let value = this.get("tokenGetDecimal");
    return value.toBigInt();
  }

  set tokenGetDecimal(value: BigInt) {
    this.set("tokenGetDecimal", Value.fromBigInt(value));
  }

  get tokenGiveTicker(): string {
    let value = this.get("tokenGiveTicker");
    return value.toString();
  }

  set tokenGiveTicker(value: string) {
    this.set("tokenGiveTicker", Value.fromString(value));
  }

  get tokenGetTicker(): string {
    let value = this.get("tokenGetTicker");
    return value.toString();
  }

  set tokenGetTicker(value: string) {
    this.set("tokenGetTicker", Value.fromString(value));
  }

  get amountGive(): BigInt {
    let value = this.get("amountGive");
    return value.toBigInt();
  }

  set amountGive(value: BigInt) {
    this.set("amountGive", Value.fromBigInt(value));
  }

  get amountGet(): BigInt {
    let value = this.get("amountGet");
    return value.toBigInt();
  }

  set amountGet(value: BigInt) {
    this.set("amountGet", Value.fromBigInt(value));
  }

  get expiryTime(): BigInt {
    let value = this.get("expiryTime");
    return value.toBigInt();
  }

  set expiryTime(value: BigInt) {
    this.set("expiryTime", Value.fromBigInt(value));
  }

  get direction(): boolean {
    let value = this.get("direction");
    return value.toBoolean();
  }

  set direction(value: boolean) {
    this.set("direction", Value.fromBoolean(value));
  }

  get cancelled(): boolean {
    let value = this.get("cancelled");
    return value.toBoolean();
  }

  set cancelled(value: boolean) {
    this.set("cancelled", Value.fromBoolean(value));
  }

  get amountReceived(): BigInt {
    let value = this.get("amountReceived");
    return value.toBigInt();
  }

  set amountReceived(value: BigInt) {
    this.set("amountReceived", Value.fromBigInt(value));
  }

  get amountSent(): BigInt {
    let value = this.get("amountSent");
    return value.toBigInt();
  }

  set amountSent(value: BigInt) {
    this.set("amountSent", Value.fromBigInt(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get fulfillOrderTimestamp(): BigInt {
    let value = this.get("fulfillOrderTimestamp");
    return value.toBigInt();
  }

  set fulfillOrderTimestamp(value: BigInt) {
    this.set("fulfillOrderTimestamp", Value.fromBigInt(value));
  }

  get fullFiller(): Array<string> {
    let value = this.get("fullFiller");
    return value.toStringArray();
  }

  set fullFiller(value: Array<string>) {
    this.set("fullFiller", Value.fromStringArray(value));
  }
}

export class FullFiller extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save FullFiller entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FullFiller entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FullFiller", id.toString(), this);
  }

  static load(id: string): FullFiller | null {
    return store.get("FullFiller", id) as FullFiller | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get order(): string {
    let value = this.get("order");
    return value.toString();
  }

  set order(value: string) {
    this.set("order", Value.fromString(value));
  }
}

export class TradeData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TradeData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TradeData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TradeData", id.toString(), this);
  }

  static load(id: string): TradeData | null {
    return store.get("TradeData", id) as TradeData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get positions(): Array<string> {
    let value = this.get("positions");
    return value.toStringArray();
  }

  set positions(value: Array<string>) {
    this.set("positions", Value.fromStringArray(value));
  }
}

export class Position extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Position entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Position entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Position", id.toString(), this);
  }

  static load(id: string): Position | null {
    return store.get("Position", id) as Position | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get tradePrice(): BigDecimal {
    let value = this.get("tradePrice");
    return value.toBigDecimal();
  }

  set tradePrice(value: BigDecimal) {
    this.set("tradePrice", Value.fromBigDecimal(value));
  }

  get trade(): string {
    let value = this.get("trade");
    return value.toString();
  }

  set trade(value: string) {
    this.set("trade", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lockedBalance(): Array<string> {
    let value = this.get("lockedBalance");
    return value.toStringArray();
  }

  set lockedBalance(value: Array<string>) {
    this.set("lockedBalance", Value.fromStringArray(value));
  }

  get totalBalance(): Array<string> {
    let value = this.get("totalBalance");
    return value.toStringArray();
  }

  set totalBalance(value: Array<string>) {
    this.set("totalBalance", Value.fromStringArray(value));
  }
}

export class LockedBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LockedBalance entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LockedBalance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LockedBalance", id.toString(), this);
  }

  static load(id: string): LockedBalance | null {
    return store.get("LockedBalance", id) as LockedBalance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get assetID(): Bytes {
    let value = this.get("assetID");
    return value.toBytes();
  }

  set assetID(value: Bytes) {
    this.set("assetID", Value.fromBytes(value));
  }

  get lockedValue(): BigInt {
    let value = this.get("lockedValue");
    return value.toBigInt();
  }

  set lockedValue(value: BigInt) {
    this.set("lockedValue", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }
}

export class TotalBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TotalBalance entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TotalBalance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TotalBalance", id.toString(), this);
  }

  static load(id: string): TotalBalance | null {
    return store.get("TotalBalance", id) as TotalBalance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get assetID(): Bytes {
    let value = this.get("assetID");
    return value.toBytes();
  }

  set assetID(value: Bytes) {
    this.set("assetID", Value.fromBytes(value));
  }

  get totalValue(): BigInt {
    let value = this.get("totalValue");
    return value.toBigInt();
  }

  set totalValue(value: BigInt) {
    this.set("totalValue", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }
}

export class Asset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Asset entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Asset entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Asset", id.toString(), this);
  }

  static load(id: string): Asset | null {
    return store.get("Asset", id) as Asset | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenTicker(): string {
    let value = this.get("tokenTicker");
    return value.toString();
  }

  set tokenTicker(value: string) {
    this.set("tokenTicker", Value.fromString(value));
  }

  get tokenDecimal(): BigInt {
    let value = this.get("tokenDecimal");
    return value.toBigInt();
  }

  set tokenDecimal(value: BigInt) {
    this.set("tokenDecimal", Value.fromBigInt(value));
  }
}
