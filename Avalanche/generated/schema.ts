// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Order extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("initiator", Value.fromBytes(Bytes.empty()));
    this.set("tokenGive", Value.fromBytes(Bytes.empty()));
    this.set("tokenGet", Value.fromBytes(Bytes.empty()));
    this.set("tokenGiveDecimal", Value.fromBigInt(BigInt.zero()));
    this.set("tokenGetDecimal", Value.fromBigInt(BigInt.zero()));
    this.set("tokenGiveTicker", Value.fromString(""));
    this.set("tokenGetTicker", Value.fromString(""));
    this.set("amountGive", Value.fromBigInt(BigInt.zero()));
    this.set("amountGet", Value.fromBigInt(BigInt.zero()));
    this.set("expiryTime", Value.fromBigInt(BigInt.zero()));
    this.set("direction", Value.fromBoolean(false));
    this.set("cancelled", Value.fromBoolean(false));
    this.set("amountReceived", Value.fromBigInt(BigInt.zero()));
    this.set("amountSent", Value.fromBigInt(BigInt.zero()));
    this.set("price", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("fulfillOrderTimestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Order entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Order must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Order", id.toString(), this);
    }
  }

  static load(id: string): Order | null {
    return changetype<Order | null>(store.get("Order", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get initiator(): Bytes {
    let value = this.get("initiator");
    return value!.toBytes();
  }

  set initiator(value: Bytes) {
    this.set("initiator", Value.fromBytes(value));
  }

  get tokenGive(): Bytes {
    let value = this.get("tokenGive");
    return value!.toBytes();
  }

  set tokenGive(value: Bytes) {
    this.set("tokenGive", Value.fromBytes(value));
  }

  get tokenGet(): Bytes {
    let value = this.get("tokenGet");
    return value!.toBytes();
  }

  set tokenGet(value: Bytes) {
    this.set("tokenGet", Value.fromBytes(value));
  }

  get tokenGiveDecimal(): BigInt {
    let value = this.get("tokenGiveDecimal");
    return value!.toBigInt();
  }

  set tokenGiveDecimal(value: BigInt) {
    this.set("tokenGiveDecimal", Value.fromBigInt(value));
  }

  get tokenGetDecimal(): BigInt {
    let value = this.get("tokenGetDecimal");
    return value!.toBigInt();
  }

  set tokenGetDecimal(value: BigInt) {
    this.set("tokenGetDecimal", Value.fromBigInt(value));
  }

  get tokenGiveTicker(): string {
    let value = this.get("tokenGiveTicker");
    return value!.toString();
  }

  set tokenGiveTicker(value: string) {
    this.set("tokenGiveTicker", Value.fromString(value));
  }

  get tokenGetTicker(): string {
    let value = this.get("tokenGetTicker");
    return value!.toString();
  }

  set tokenGetTicker(value: string) {
    this.set("tokenGetTicker", Value.fromString(value));
  }

  get amountGive(): BigInt {
    let value = this.get("amountGive");
    return value!.toBigInt();
  }

  set amountGive(value: BigInt) {
    this.set("amountGive", Value.fromBigInt(value));
  }

  get amountGet(): BigInt {
    let value = this.get("amountGet");
    return value!.toBigInt();
  }

  set amountGet(value: BigInt) {
    this.set("amountGet", Value.fromBigInt(value));
  }

  get expiryTime(): BigInt {
    let value = this.get("expiryTime");
    return value!.toBigInt();
  }

  set expiryTime(value: BigInt) {
    this.set("expiryTime", Value.fromBigInt(value));
  }

  get direction(): boolean {
    let value = this.get("direction");
    return value!.toBoolean();
  }

  set direction(value: boolean) {
    this.set("direction", Value.fromBoolean(value));
  }

  get cancelled(): boolean {
    let value = this.get("cancelled");
    return value!.toBoolean();
  }

  set cancelled(value: boolean) {
    this.set("cancelled", Value.fromBoolean(value));
  }

  get amountReceived(): BigInt {
    let value = this.get("amountReceived");
    return value!.toBigInt();
  }

  set amountReceived(value: BigInt) {
    this.set("amountReceived", Value.fromBigInt(value));
  }

  get amountSent(): BigInt {
    let value = this.get("amountSent");
    return value!.toBigInt();
  }

  set amountSent(value: BigInt) {
    this.set("amountSent", Value.fromBigInt(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value!.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get fulfillOrderTimestamp(): BigInt {
    let value = this.get("fulfillOrderTimestamp");
    return value!.toBigInt();
  }

  set fulfillOrderTimestamp(value: BigInt) {
    this.set("fulfillOrderTimestamp", Value.fromBigInt(value));
  }

  get fullFiller(): Array<string> {
    let value = this.get("fullFiller");
    return value!.toStringArray();
  }

  set fullFiller(value: Array<string>) {
    this.set("fullFiller", Value.fromStringArray(value));
  }
}

export class FullFiller extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("order", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FullFiller entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FullFiller must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FullFiller", id.toString(), this);
    }
  }

  static load(id: string): FullFiller | null {
    return changetype<FullFiller | null>(store.get("FullFiller", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get order(): string {
    let value = this.get("order");
    return value!.toString();
  }

  set order(value: string) {
    this.set("order", Value.fromString(value));
  }
}

export class TradeData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TradeData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TradeData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TradeData", id.toString(), this);
    }
  }

  static load(id: string): TradeData | null {
    return changetype<TradeData | null>(store.get("TradeData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get positions(): Array<string> {
    let value = this.get("positions");
    return value!.toStringArray();
  }

  set positions(value: Array<string>) {
    this.set("positions", Value.fromStringArray(value));
  }
}

export class Position extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tradePrice", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("trade", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Position entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Position must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Position", id.toString(), this);
    }
  }

  static load(id: string): Position | null {
    return changetype<Position | null>(store.get("Position", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get tradePrice(): BigDecimal {
    let value = this.get("tradePrice");
    return value!.toBigDecimal();
  }

  set tradePrice(value: BigDecimal) {
    this.set("tradePrice", Value.fromBigDecimal(value));
  }

  get trade(): string {
    let value = this.get("trade");
    return value!.toString();
  }

  set trade(value: string) {
    this.set("trade", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lockedBalance(): Array<string> {
    let value = this.get("lockedBalance");
    return value!.toStringArray();
  }

  set lockedBalance(value: Array<string>) {
    this.set("lockedBalance", Value.fromStringArray(value));
  }

  get totalBalance(): Array<string> {
    let value = this.get("totalBalance");
    return value!.toStringArray();
  }

  set totalBalance(value: Array<string>) {
    this.set("totalBalance", Value.fromStringArray(value));
  }
}

export class LockedBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("assetID", Value.fromBytes(Bytes.empty()));
    this.set("lockedValue", Value.fromBigInt(BigInt.zero()));
    this.set("user", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LockedBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LockedBalance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LockedBalance", id.toString(), this);
    }
  }

  static load(id: string): LockedBalance | null {
    return changetype<LockedBalance | null>(store.get("LockedBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get assetID(): Bytes {
    let value = this.get("assetID");
    return value!.toBytes();
  }

  set assetID(value: Bytes) {
    this.set("assetID", Value.fromBytes(value));
  }

  get lockedValue(): BigInt {
    let value = this.get("lockedValue");
    return value!.toBigInt();
  }

  set lockedValue(value: BigInt) {
    this.set("lockedValue", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }
}

export class TotalBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("assetID", Value.fromBytes(Bytes.empty()));
    this.set("totalValue", Value.fromBigInt(BigInt.zero()));
    this.set("user", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TotalBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TotalBalance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TotalBalance", id.toString(), this);
    }
  }

  static load(id: string): TotalBalance | null {
    return changetype<TotalBalance | null>(store.get("TotalBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get assetID(): Bytes {
    let value = this.get("assetID");
    return value!.toBytes();
  }

  set assetID(value: Bytes) {
    this.set("assetID", Value.fromBytes(value));
  }

  get totalValue(): BigInt {
    let value = this.get("totalValue");
    return value!.toBigInt();
  }

  set totalValue(value: BigInt) {
    this.set("totalValue", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }
}

export class Asset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenTicker", Value.fromString(""));
    this.set("tokenDecimal", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Asset entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Asset must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Asset", id.toString(), this);
    }
  }

  static load(id: string): Asset | null {
    return changetype<Asset | null>(store.get("Asset", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenTicker(): string {
    let value = this.get("tokenTicker");
    return value!.toString();
  }

  set tokenTicker(value: string) {
    this.set("tokenTicker", Value.fromString(value));
  }

  get tokenDecimal(): BigInt {
    let value = this.get("tokenDecimal");
    return value!.toBigInt();
  }

  set tokenDecimal(value: BigInt) {
    this.set("tokenDecimal", Value.fromBigInt(value));
  }
}
